import re
from collections import Counter

import numpy as np

# ----初始化
def 随机获取玩家身份(角色种类及数量):
    角色种类及数量列表 = list(角色种类及数量.items())
    随机前的角色身份 = []
    for 角色种类及数量 in 角色种类及数量列表:
        随机前的角色身份 += [角色种类及数量[0]] * int(角色种类及数量[1])
    随机角色身份 = np.random.permutation(随机前的角色身份)
    return 随机角色身份

def 初始化角色道具列表(玩家角色身份列表,角色对应道具列表):
    # 角色对应道具列表:[[角色,道具种类,道具数量],[角色,道具种类,道具数量]]
    角色道具列表 = [[]] * len(玩家角色身份列表)
    for 角色,道具种类,道具数量 in 角色对应道具列表:
        for 玩家id,玩家角色身份 in enumerate(玩家角色身份列表):
            if 玩家角色身份 == 角色:
                角色道具列表[玩家id] = 角色道具列表[玩家id] + [[道具种类,道具数量]]
    return 角色道具列表


# ----权力机关的职责
# 让玩家知道自己的编号
def 根据玩家编号为玩家发送编号消息(玩家角色身份列表,消息列表):
    for i, 玩家角色 in enumerate(玩家角色身份列表):
        消息列表[i] = 消息列表[i] + '你是{}号玩家,'.format(i)
    return 消息列表
def 根据选举结果处死玩家(玩家角色身份列表,昼夜,处死的玩家编号):
    if 昼夜 == '白天':
        玩家角色身份列表[int(处死的玩家编号)] = '死亡'
    elif 昼夜 == '黑夜':
        玩家角色身份列表[int(处死的玩家编号)] = '濒死'
    else:
        print("输入昼夜错误")
    return 玩家角色身份列表
def 代管时间变化(玩家角色现状态,公示):

    for i,玩家角色身份 in enumerate(玩家角色现状态):
        if 玩家角色身份 == '濒死':
            玩家角色现状态[i] = '死亡'
            公示 += ['{}号玩家已死亡'.format(str(i))]
    return 玩家角色现状态, 公示

def 判断游戏结束(玩家现状态列表):
    玩家角色身份统计 = Counter(玩家现状态列表)
    # 狼人数量达标
    if 玩家角色身份统计['狼人'] * 2 >= len(玩家现状态列表) - 玩家角色身份统计['死亡']:
        return 1,'游戏结束,狼人数量达标,狼人胜利!'
    # 村民全无
    elif 玩家角色身份统计['村民'] == 0:
        return 1,'游戏结束,村民全没了,狼人胜利!'
    # 神职全无
    elif len(玩家现状态列表) - 玩家角色身份统计['村民'] - 玩家角色身份统计['狼人'] - 玩家角色身份统计['死亡'] == 0:
        return 1,'游戏结束,神职全没了,狼人胜利!'
    # 狼人全无
    elif 玩家角色身份统计['狼人'] == 0:
        return 1,'游戏结束,平民胜利!'
    else:
        return 0,None

# 根据消息对象的名称或编号为消息对象发送消息
def 根据玩家身份为玩家发送消息(玩家角色身份列表,消息列表,消息对象,消息):
    if str(消息对象).isdigit():
        消息列表[int(消息对象)] = 消息列表[int(消息对象)] + 消息
    else:
        for i,玩家角色身份 in enumerate(玩家角色身份列表):
            if 玩家角色身份 == 消息对象 or 消息对象 == '全体成员':
                消息列表[i] = 消息列表[i] + 消息
    return 消息列表

# 将玩家的话语翻译成玩家权利的行使
def 法律援助_法言法语(玩家的话语):
    pattern = "\[.+?\]"
    玩家要行使的权利列表 = re.findall(pattern, 玩家的话语)
    return 玩家要行使的权利列表



# ----权利行使
def 狼人行动(玩家角色身份列表,狼人的话):
    行为列表 = 法律援助_法言法语(狼人的话)
    # 要件数量错误判断
    if len(行为列表) == 0:
        return False, '你正在扮演玩家,请自己选择要杀的玩家,如果你需要杀玩家,请使用杀人的标准格式[杀死:玩家编号数字],你需要直接说出这个指令.'
    elif len(行为列表) >= 1:
        # 判断是否识别错误
        识别结果 = []
        for 行为 in 行为列表:
            if len(行为) <= 5:
                return False, '如果你需要杀玩家,请使用杀人的标准格式[杀死:玩家编号数字],你需要直接说出这个指令.'
            else:
                if 行为[:4] == '[杀死:' and 行为[4:-1].isdigit():
                    识别结果 += [True]
                else:
                    识别结果 += [False]
        对错对应数量 = Counter(识别结果)
        if 对错对应数量[True] == 0:
            return False, '如果你需要杀玩家,请使用杀人的标准格式[杀死:玩家编号数字],你需要直接说出这个指令.'
        elif 对错对应数量[True] == 1:
            for i, judge in enumerate(识别结果):
                if judge == True:
                    行为列表 = [行为列表[i]]
        elif 对错对应数量[True] > 1:
            决策结果 = []
            for i, judge in enumerate(识别结果):
                if judge:
                    决策结果 += [行为列表[i]]
            print(决策结果,list(set(决策结果)))
            决策结果 = list(set(决策结果))
            if len(决策结果) == 1:
                行为列表 = [行为列表[0]]
            else:
                return False, '你只能在一个晚上使用一次技能,请重新选择'
    # 要件构成错误判断
    if 行为列表[0][:4] != '[杀死:':
        return False, '如果你需要杀玩家,请使用杀人的标准格式[杀死:玩家编号数字],你需要直接说出这个指令.'
    elif not 行为列表[0][4:-1].isdigit():
        return False, '使用杀人的标准格式[杀死:玩家编号数字],请输入且仅输入玩家的编号对应数字替换中括号内玩家编号一栏.'
    # 事实错误判断
    杀死对象编号 = int(行为列表[0][4:-1])
    if 杀死对象编号 >= len(玩家角色身份列表):
        return False, '请使用前文提到的杀人格式[杀死:玩家编号数字],并选择有效的玩家编号.'
    elif 玩家角色身份列表[杀死对象编号] == '死亡':
        return False, '你不能杀已死亡的个体.'
    else:
        return True, '你选择杀死{}号玩家.'.format(str(杀死对象编号))


def 女巫行动(玩家角色身份列表,女巫玩家编号,女巫的话,道具列表):
    行为列表 = 法律援助_法言法语(女巫的话)
    if len(行为列表) == 1:
        if 行为列表[0] == '[弃权:-1]':
            return True,'你什么药剂都没用.'
    # 要件数量错误判断
    if len(行为列表) == 0:
        return False, '请以玩家的身份回复,使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字],你也可以发送[弃权:-1](请保证格式正确)表明不使用药剂.'
    elif len(行为列表) >= 1:
        # 判断是否识别错误
        识别结果 = []
        for 行为 in 行为列表:
            if len(行为) <= 5:
                return False, '请以玩家的身份回复,请使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字],你也可以发送[弃权:-1]表明不使用任何药剂.'
            else:
                if ((行为[:4] == '[解药:' or 行为[:4] == '[毒药:' ) and 行为[4:-1].isdigit())or 行为 == '[弃权:-1]':
                    识别结果 += ['1']
                else:
                    识别结果 += ['0']
        对错对应数量 = Counter(识别结果)
        if 对错对应数量['1'] == 0:
            return False, '请以玩家的身份回复,你发送的信息有误.请使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字],你也可以发送[弃权:-1]表明不使用药剂.(请不要用[解药:-1],[投票:-1]或[毒药:-1]等其他形式来表达弃权.)'
        elif 对错对应数量['1'] == 1:
            for i, judge in enumerate(识别结果):
                if judge == True:
                    if len(行为列表) == 1:
                        if 行为列表[0] == '[弃权:-1]':
                            return True, '你什么药剂都没用.'
                        else:
                            行为列表 = [行为列表[i]]
        elif 对错对应数量['1'] > 1:
            决策结果 = []
            for i, judge in enumerate(识别结果):
                if judge:
                    决策结果 += [行为列表[i]]
            print(决策结果,set(决策结果))
            决策结果 = list(set(决策结果))
            if len(决策结果) == 1:
                行为列表 = [行为列表[0]]
            else:
                return False, '请以玩家的身份回复,你只能在一个晚上使用一种药剂,并且使用一个药剂只能对一个玩家使用,请重新选择.'
    # 要件构成错误判断
    if 行为[:4] != '[解药:' and 行为[:4] != '[毒药:':
        return False, '请以玩家的身份回复,使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字]表述你想要做的行为(必须符合中括号内(包含中括号)的格式),你也可以发送[弃权:-1]表明不使用药剂.'
    elif not 行为列表[0][4:-1].isdigit():
        return False, '请以玩家的身份回复,使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字],请输入且仅输入玩家的编号对应数字(不要变更符号或添加空格)替换中括号内玩家编号一栏表述你想要做的行为.'
    # 事实错误判断
    使用道具 = 行为列表[0][1:3]
    对象编号 = int(行为列表[0][4:-1])
    if 对象编号 >= len(玩家角色身份列表):
        return False, '请以玩家的身份回复,使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字],请输入且仅输入玩家的编号对应数字替换中括号内玩家编号一栏表述你想要做的行为.'
    if 使用道具 == '解药':
        for 道具 in 道具列表[女巫玩家编号]:
            if 道具[0] == '解药' and 道具[1] == 0:
                return False, '你已经没有解药了,如果你还有毒药,可以选择使用毒药发送[毒药:玩家编号数字]或者弃权发送[弃权:-1].'
        if 玩家角色身份列表[对象编号] == '死亡':
            return False, '你不能救已彻底死亡的个体.'
        elif 玩家角色身份列表[对象编号] != '濒死':
            return False, '你不能救存活的个体.'
        elif 玩家角色身份列表[对象编号] == '濒死':
            return True, '你选择救{}号玩家.'.format(str(对象编号))
    elif 使用道具 == '毒药':
        for 道具 in 道具列表[女巫玩家编号]:
            if 道具[0] == '毒药' and 道具[1] == 0:
                return False, '你已经没有毒药了,如果你还有解药,可以选择使用解药发送[解药:玩家编号数字]或者弃权发送[弃权:-1].'
        if 玩家角色身份列表[对象编号] == '死亡':
            return False, '你不需要杀已彻底死亡的个体.'
        elif 玩家角色身份列表[对象编号] != '濒死':
            return False, '你不必杀濒死的个体.'
        elif 玩家角色身份列表[对象编号] == '濒死':
            return True, '你选择杀{}号玩家.'.format(str(对象编号))
    else:
        return False,'请以玩家的身份回复,请使用解药,毒药的标准格式[解药:玩家编号数字]和[毒药:玩家编号数字],请输入且仅输入玩家的编号对应数字替换中括号内玩家编号一栏.'

# 有身份列表可以查死亡的角色
def 预言家行动(玩家角色身份列表,玩家现状态列表,预言家的话):
    行为列表 = 法律援助_法言法语(预言家的话)
    # 要件数量错误判断
    if len(行为列表) == 0:
        return False, '请以玩家的身份回复,请使用查验的标准格式[查验:玩家编号数字]表述你想要做的行为.你需要直接发送出来具体的行为,而不能仅仅在思考中体现.'
    elif len(行为列表) >= 1:
        # 判断是否识别错误
        识别结果 = []
        for 行为 in 行为列表:
            if len(行为) <= 5:
                return False, '请使用查验的标准格式[查验:玩家编号数字]表述你想要做的行为,.'
            else:
                if 行为[:4]=='[查验:' and 行为[4:-1].isdigit():
                    识别结果 += [True]
                else:
                    识别结果 += [False]
        对错对应数量 = Counter(识别结果)
        if 对错对应数量[True] == 0:
            return False, '请使用查验的标准格式[查验:玩家编号数字]表述你想要做的行为.'
        elif 对错对应数量[True] == 1:
            for i,judge in enumerate(识别结果):
                if judge == True:
                    行为列表 = [行为列表[i]]
        elif 对错对应数量[True] > 1:
            决策结果 = []
            for i,judge in enumerate(识别结果):
                if judge:
                    决策结果 += [行为列表[i]]
            决策结果 = list(set(决策结果))
            if len(决策结果) == 1:
                行为列表 = [行为列表[0]]
            else:
                return False,'你只能在一个晚上使用一次技能,请重新选择.'
    # 要件构成错误判断
    if 行为列表[0][:4] != '[查验:':
        return False,'请使用查验的标准格式[查验:玩家编号数字]表述你想要做的行为.'
    elif not 行为列表[0][4:-1].isdigit():
        return False,'使用查验的标准格式[查验:玩家编号数字],请输入且仅输入玩家的编号对应数字替换中括号内玩家编号一栏.'

    # 事实错误判断
    查验对象编号 = int(行为列表[0][4:-1])
    if 查验对象编号 >= len(玩家现状态列表):
        return False,'请使用前文提到的查验格式[查验:玩家编号],并选择有效的玩家编号表述你想要做的行为.'
    elif 玩家现状态列表[查验对象编号] == '预言家':
        return False,'你不能查验自己,请查验其他人!'
    # todo 凭什么不能查验已死亡的个体
    elif 玩家现状态列表[查验对象编号] == '死亡':
        return False,'你不能查验已死亡的个体.'
    else:
        return True,'你查验的{}号玩家的身份是{}.'.format(str(查验对象编号),玩家角色身份列表[查验对象编号])

# 有身份列表可以查死亡的角色
def 投票(投票范围列表, 玩家现状态列表, 投票者的话):
    行为列表 = 法律援助_法言法语(投票者的话)
    # 要件数量错误判断
    if len(行为列表) == 0:
        return False, '请以玩家的身份回复,请使用投票的标准格式[投票:玩家编号数字]表述你想要做的行为.你需要直接发送出来具体的行为,而不能仅仅在思考中体现.'
    elif len(行为列表) >= 1:
        # 判断是否识别错误
        识别结果 = []
        for 行为 in 行为列表:
            if len(行为) <= 5:
                return False, '请使用投票的标准格式[投票:玩家编号数字]表述你想要做的行为,.'
            else:
                if 行为[:4]=='[投票:' and (行为[4:-1].isdigit() or 行为 == '[投票:-1]'):
                    识别结果 += [True]
                else:
                    识别结果 += [False]
        对错对应数量 = Counter(识别结果)
        if 对错对应数量[True] == 0:
            return False, '请使用投票的标准格式[投票:玩家编号数字]表述你想要做的行为或者[投票:-1]表明弃权.'
        elif 对错对应数量[True] == 1:
            for i,judge in enumerate(识别结果):
                if judge == True:
                    行为列表 = [行为列表[i]]
        elif 对错对应数量[True] > 1:
            决策结果 = []
            for i,judge in enumerate(识别结果):
                if judge:
                    决策结果 += [行为列表[i]]
            决策结果 = list(set(决策结果))
            if len(决策结果) == 1:
                行为列表 = [行为列表[0]]
            else:
                return False,'你只能一次投一个玩家,请重新选择.'
    if 行为列表[0] == '[投票:-1]':
        return True, '你选择在投票阶段弃权.'
    # 要件构成错误判断或弃权
    if 行为列表[0][:4] != '[投票:':
        return False,'请使用投票的标准格式[投票:玩家编号数字],[投票:x],其中x代表玩家对应编号.例如:表述你想要做的行为或者[投票:-1]表明弃权.'
    elif not 行为列表[0][4:-1].isdigit():
        # 要件构成错误判断
        return False,'使用投票的标准格式[投票:玩家编号数字],请输入且仅输入玩家的编号对应数字替换中括号内玩家编号一栏或者[投票:-1]表明弃权.'

    # 事实错误判断
    投票对象编号 = int(行为列表[0][4:-1])
    if 投票对象编号 >= len(玩家现状态列表):
        return False,'请使用前文提到的投票格式[投票:玩家编号]或者[投票:-1]表明弃权,并选择有效的玩家编号表述你想要做的行为.'
    # 感觉可以投票自己
    #elif 玩家现状态列表[投票对象编号] == '预言家':
        #return False,'你不能投票自己,请投票其他人!'
    # todo 凭什么不能查验已死亡的个体
    elif str(投票对象编号) not in 投票范围列表:
        return False,'请在本轮的投票淘汰范围中选择.'
    elif 玩家现状态列表[投票对象编号] == '死亡':
        return False,'你不能投票已死亡的个体.'
    else:
        return True,'你投票{}号玩家.'.format(str(投票对象编号))

def 猎人行动(玩家角色身份列表,玩家现状态列表,猎人的话):
    行为列表 = 法律援助_法言法语(猎人的话)
    # 要件数量错误判断
    if len(行为列表) == 0:
        return False, '请使用杀人或弃权的标准格式[带走:玩家编号数字],[弃权:-1].'
    elif len(行为列表) == 1:
        if 行为列表[0] == '[弃权:-1]':
            return True, '你选择弃权.'
    elif len(行为列表) > 1:
        # 判断是否识别错误
        识别结果 = []
        for 行为 in 行为列表:
            if len(行为) <= 5:
                return False, '请使用杀人或弃权的标准格式[带走:玩家编号数字],[弃权:-1].'
            else:
                if 行为[:4] == '[带走:'  and 行为[4:-1].isdigit() or 行为 == '[弃权:-1]':
                    识别结果 += [True]
                else:
                    识别结果 += [False]
        对错对应数量 = Counter(识别结果)
        if 对错对应数量[True] == 0:
            return False, '请使用杀人或弃权的标准格式[带走:玩家编号数字],[弃权:-1].'
        elif 对错对应数量[True] == 1:
            for i, judge in enumerate(识别结果):
                if judge == True:
                    行为列表 = [行为列表[i]]
        elif 对错对应数量[True] > 1:
            决策结果 = []
            for i, judge in enumerate(识别结果):
                if judge:
                    决策结果 += [行为列表[i]]
            决策结果 = list(set(决策结果))
            if len(决策结果) == 1:
                行为列表 = [行为列表[0]]
            else:
                return False, '你只能在一个晚上使用一次技能,请重新选择.'
    # 要件构成错误判断
    if 行为列表[0][:4] != '[带走:' and 行为列表[0][:4] != '[弃权:':
        return False, '请使用杀人或弃权的标准格式[带走:玩家编号数字],[弃权:-1].'
    elif not 行为列表[0][4:-1].isdigit():
        return False, '使用杀人的标准格式[带走:玩家编号数字],请输入且仅输入玩家的编号对应数字替换中括号内玩家编号一栏.弃权的,请使用标准格式[弃权:-1].'
    # 事实错误判断
    if 行为列表[0][:4] == '[带走:':
        杀死对象编号 = int(行为列表[0][4:-1])
        if 杀死对象编号 >= len(玩家角色身份列表):
            return False, '请使用前文提到的杀人格式[带走:玩家编号数字],并选择有效的玩家编号.'
        elif 玩家现状态列表[杀死对象编号] == '死亡':
            return False, '你不能杀已死亡的个体.'
        else:
            return True, '你选择杀死{}号玩家.'.format(str(杀死对象编号))
    elif 行为列表[0] == '[弃权:-1]':
        return True, '你选择弃权.'





