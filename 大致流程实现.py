import copy
import random
import re

from ollama import ChatResponse, chat

from 狼人杀游戏程序.一些实现的函数 import *
from 狼人杀游戏程序.一些实现的函数 import 根据玩家身份为玩家发送消息

model_name = 'qwen3:14b'
model_name = model_name
# todo----初始化
end = 0
# 创建玩家列表及选择玩家角色
玩家数量 = 13
角色种类及数量 = {'村民':'4','狼人':'3','预言家':'1','女巫':'1','猎人':'1'}
初始角色对应道具列表 = [['狼人','夜间杀人投票权',-1],['预言家','观星',-1],['女巫','解药','1'],['女巫','毒药',1],['猎人','颗秒',-1]]
# 分配角色身份
玩家角色身份列表 = 随机获取玩家身份(角色种类及数量)
玩家现状态列表 = copy.deepcopy(玩家角色身份列表)
print(玩家角色身份列表)
消息列表 = [''] * len(玩家角色身份列表)
游戏规则 ='''请你配合我玩狼人杀,以其中一名玩家的身份完成接下来的对话,以下是狼人杀的身份规则.
1.村民:村民没有什么特殊技能，说白了，就是闭眼玩家一个。一般情况下，跟着神(往往为预言家)投票就可以了。
2.狼人:晚上在听到“狼人请睁眼”指令时睁开眼，先确认队友都有谁。然后选择杀死一位场上玩家(注意:狼队友之间不可以说话交流，即不能讨论商量杀死哪位玩家,但你们可以根据队友的选择更换商量杀死的目标)。
白天故意说一些假话(比如说自己是好人，或者某种神职之类的)混淆视听，然后让好人们误把好人投出去。
3.预言家:属于神职，可以在晚上查验一位玩家的身份，但只能知道该玩家是好人还是坏人，不知道其具体身份。
一般前两天先隐藏一下自己的身份，不要轻易暴露，以免被狼人杀死。
可以在第三天直接说自己的身份，然后讲清楚这两天分别查验的谁的身份是什么，若有查杀(即查验到狼)，可以带头投票这位玩家。或者说一下查验到哪位玩家为好人(即发金水)，为该玩家排除嫌疑。
4.女巫:属于神职，有一瓶解药，一瓶毒药。
晚上，狼人杀死一位玩家后，女巫可以选择是否使用解药(即是否救该玩家)，是否使用毒药(即女巫觉得可能是狼或者被预言家查杀的玩家)。
注意:解药跟毒药不能在同一天晚上使用。
若女巫使用了解药，则该夜为平安夜，但其他玩家(除狼人外)不知道女巫救的是谁。
女巫的解药一般是会留着救自己或者是预言家，前两天一般不会轻易救人，毕竟解药只有一瓶。一般也不会轻易毒人，以免毒错好人。
5.猎人:属于神职，可以开枪，俗称带走，即在临死前带走一位自己认为比较有嫌疑的玩家。
注意；猎人只有在被投票处决或者是被狼杀死的时候可以开枪带走别人，如果是被女巫的毒药毒死的，则不能使用猎人技能。
如果猎人第一天晚上就被狼人杀死了，一般不要轻易带走别人(该技能可以放弃使用)，以免错带走好人。
如果是被某位玩家带头投票处决的，并且该玩家没有给出合理的理由，那么你就带走他吧，一般就是狼人了。
如果是10人简单模式的话，会有4名村民，3名狼人，1名预言家，1名女巫，1名猎人。
下面再介绍一下天黑之后的流程:
1.狼人请睁眼，狼人确认各自队友后，选择杀死一位玩家。
2.女巫请睁眼，昨晚被杀的是X玩家，你要使用解药吗？你要使用毒药吗？你选择对谁使用毒药？
3.预言家请睁眼，你选择查验身份的是哪位玩家？他的身份是(好人或狼人)
4.天亮了，昨晚哪位玩家死亡/昨晚是平安夜
我的角色是法官,我会协助你们10人游玩,请你以玩家的身份参加游戏,你们十个玩家的编号为0-9，请每个玩家在进行活动时按照我向你们提供的[行为:行为对象编号]的形式,但不要替换或漏掉标准行为形式的符号或添加其它任意字符.你只需要回答游戏正在进行阶段的选择,我会在游戏到达一个阶段时提示你这个阶段该做的事,那么现在游戏开始。'''
身份的给付与主体使用道具或行为的规则={
    '村民':'你是村民,你能在白天投票,如果你需要投票,请说[投票:被投票的人的编号],或者弃权请说[投票:-1].',
    '女巫':'你是女巫,你有一瓶解药,一瓶毒药.你能在白天投票,如果你需要投票,请说[投票:被投票的人的编号],或者弃权请说[投票:-1],你可以在晚上法官宣布到你的回合时使用解药救濒死的人,或者使用毒药让一人在白天死亡.使用毒药时请说[毒药:玩家编号],使用解药请说[解药:玩家编号],当你被杀时,你的解药也可以对自己使用.当你不想使用药剂或想什么都不做或者没有药剂时,你也可以用[弃权:-1]表明放弃使用任何药剂,但不要在括号内添加其它任何字符.',
    '预言家':'你是预言家,你能在白天投票,如果你需要投票,请说[投票:被投票的人的编号],或者弃权请说[投票:-1].你可以在每晚查验一次别人的身份,当你需要查验别人身份时,请说[查验:玩家编号],预言家不能放弃查验.',
    '猎人':'你是猎人,你能在白天投票,如果你需要投票,请说[投票:被投票的人的编号],当你被别人投票濒死的时候,你可以使用猎枪让一人死亡,如果需要,请说[带走:玩家编号]',
    '狼人':'你是狼人,你能在白天投票,如果你需要投票,请说[投票:被投票的人的编号],当法官在夜晚让狼人睁眼时,狼人可以活动,如果你发现其他玩家睁眼,那么说明他是你的队友.你或者你和你的队友可以投票选择一人杀死,请说[杀死:玩家编号],如果你有队友,当你和你的队友选择不同时,我会告诉你们队友的选择,并给你们重新选择的机会,如果要重新选择,请说[杀死:玩家编号],如果你和你的队友选择仍然不一致,那么法官将从中随机选择一人作为杀死的对象.'
}

道具列表 = 初始化角色道具列表(玩家角色身份列表,初始角色对应道具列表)
print(道具列表)
Agent的历史对话 = [[]] * len(玩家角色身份列表)

# todo----发送规则,
# 发送游戏规则
消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表,消息列表,'全体成员',游戏规则)
# 发送身份,玩家编号
消息列表 = 根据玩家编号为玩家发送编号消息(玩家角色身份列表,消息列表)
for 角色 in 角色种类及数量.keys():
    消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表,消息列表,角色,身份的给付与主体使用道具或行为的规则[角色])
# print(消息列表[0])
day = 1
公示 = []
while not end:
    昼夜 = '黑夜'
    猎人技能发动 = []
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员', '现在是第{}天的夜晚,天黑请闭眼.\n'.format(str(day)))
    # 天黑各自行动
    print('狼人回合')
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','狼人请睁眼,狼人请选择你要杀的玩家.\n')
    狼人编号列表 = []
    for i, 玩家角色身份 in enumerate(玩家现状态列表):
        if 玩家角色身份 == '狼人':
            狼人编号列表 += [str(i)]
        if day == 1 and len(狼人编号列表) > 1:
            消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '狼人','你睁开了眼,看见了你的队友们,现在你知道狼人是'+'、'.join(狼人编号列表))
    # 狼人第一轮选择
    狼人第一轮行为 = []
    狼人选择 = []
    for i, 玩家角色身份 in enumerate(玩家现状态列表):
        if 玩家角色身份 == '狼人':
            狼人回合结束 = False
            while not 狼人回合结束:
                Agent的历史对话[i] = Agent的历史对话[i] + [{'role': 'user', 'content': 消息列表[i]}]
                消息列表[i] = ''
                response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[i])
                Agent的历史对话[i] = Agent的历史对话[i] + [
                    {'role': 'assistant', 'content': response['message']['content']}]
                狼人回答 = response['message']['content']
                think部分的末尾序数 = 狼人回答.find('</think>') + len('</think>')
                # print(预言家回答[think部分的末尾序数:])
                狼人回合结束, 对狼人行为的回答 = 狼人行动(玩家现状态列表, 狼人回答[think部分的末尾序数:])
                消息列表[i] = 对狼人行为的回答
                print(狼人回答[think部分的末尾序数:], 对狼人行为的回答)
            狼人第一轮行为 += ['{}号狼人{}'.format(str(i),对狼人行为的回答[1:])]
            狼人选择 += [int(对狼人行为的回答[5:].replace('号玩家.',''))]
    狼人选择 = list(set(狼人选择))
    if len(set(狼人选择)) == 1:
        狼人选择 = 狼人选择[0]
    # 狼人选择互相了解
    elif len(狼人第一轮行为) > 1 and len(set(狼人选择))>1:
        狼人第二轮行为 = []
        狼人第二轮选择 = []
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '狼人','你观察队友的选择,你们的选择分别是{}.现在,你可以选择根据队友的选择调整或者维持原样,这是更换选择的最后一次机会.'.format('、'.join(狼人第一轮行为)))
        for i, 玩家角色身份 in enumerate(玩家现状态列表):
            if 玩家角色身份 == '狼人':
                狼人回合结束 = False
                while not 狼人回合结束:
                    Agent的历史对话[i] = Agent的历史对话[i] + [{'role': 'user', 'content': 消息列表[i]}]
                    消息列表[i] = ''
                    response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[i])
                    Agent的历史对话[i] = Agent的历史对话[i] + [
                        {'role': 'assistant', 'content': response['message']['content']}]
                    狼人回答 = response['message']['content']
                    think部分的末尾序数 = 狼人回答.find('</think>') + len('</think>')
                    # print(预言家回答[think部分的末尾序数:])
                    狼人回合结束, 对狼人行为的回答 = 狼人行动(玩家现状态列表, 狼人回答[think部分的末尾序数:])
                    消息列表[i] = 对狼人行为的回答
                    print(狼人回答[think部分的末尾序数:], 对狼人行为的回答)
                狼人第二轮行为 += ['{}号狼人{}'.format(str(i), 对狼人行为的回答[1:])]
                狼人第二轮选择 += [int(对狼人行为的回答[5:].replace('号玩家.', ''))]
        # 选择仍然没有统一,随机抽取一个
        if len(set(狼人第二轮选择)) > 1:
            狼人第二轮选择 = int(random.choice(狼人第二轮选择))
            消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '狼人','由于你们第二次选择仍然没有统一:{},法官从中随机抽取一个结果:{}号玩家\n'.format('、'.join(狼人第一轮行为),str(狼人选择)))
            狼人选择 = 狼人第二轮选择
        else:
            狼人选择 = 狼人第二轮选择[0]
    # 根据狼人选择处死玩家
    print(狼人选择)
    玩家现状态列表 = 根据选举结果处死玩家(玩家现状态列表,昼夜,狼人选择)
    # 女巫的回合
    print('女巫回合')
    濒死玩家编号 = []
    for i,玩家角色身份 in enumerate(玩家现状态列表):
        if 玩家角色身份 == '濒死':
            濒死玩家编号 += [str(i)]
    print(玩家角色身份列表,玩家现状态列表,'134行')
    消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表, '全体成员','狼人请闭眼(这表明狼人完成了他或他们的任务).女巫请睁眼,今天晚上这个人死了,你要救吗?或者毒药要使用吗?\n')
    消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表,'女巫','在法官说死亡玩家的时候,你看见法官指向{}号玩家,这表明{}号玩家被杀了.\n'.format('、'.join(濒死玩家编号),'、'.join(濒死玩家编号)))
    女巫选择 = []
    for i, 玩家角色身份 in enumerate(玩家角色身份列表):
        if 玩家角色身份 == '女巫' and 玩家现状态列表[i] != '死亡':
            毒药,解药 = [],[]
            for 道具 in 道具列表[i]:
                if 道具[0]=='毒药':
                    毒药 = 道具
                if 道具[0]=='解药':
                    解药 = 道具
            if 玩家现状态列表[i] == '濒死':
                消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表,str(i),'你注意到法官说的濒死的玩家编号中包含了你自己,在濒死状态中你仍然可以使用药剂(如果你有的话).\n')
            消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表,str(i),'你还有{}瓶解药,{}瓶毒药.\n'.format(解药[1],毒药[1]))
            女巫回合结束 = False
            while not 女巫回合结束:
                Agent的历史对话[i] = Agent的历史对话[i] + [{'role': 'user', 'content': 消息列表[i]}]
                消息列表[i] = ''
                response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[i])
                Agent的历史对话[i] = Agent的历史对话[i] + [
                    {'role': 'assistant', 'content': response['message']['content']}]
                女巫回答 = response['message']['content']
                think部分的末尾序数 = 女巫回答.find('</think>') + len('</think>')
                # print(预言家回答[think部分的末尾序数:])
                女巫回合结束, 对女巫行为的回答 = 女巫行动(玩家现状态列表,i, 女巫回答[think部分的末尾序数:],道具列表)
                消息列表[i] = 对女巫行为的回答
                if 对女巫行为的回答 == '你什么药剂都没用.':
                    pass
                if 对女巫行为的回答[:4] == '你选择救':
                    解救玩家编号 = int(对狼人行为的回答[5:].replace('号玩家.', ''))
                    玩家现状态列表[解救玩家编号] = 玩家角色身份列表[解救玩家编号]
                if 对女巫行为的回答[:4] == '你选择杀':
                    杀的玩家编号 = int(对狼人行为的回答[5:].replace('号玩家.', ''))
                    # 女巫处理的人直接死亡
                    玩家现状态列表 = 根据选举结果处死玩家(玩家现状态列表,'白天',杀的玩家编号)
                    公示 += ['{}号玩家已死亡.'.format(str(杀的玩家编号))]
                print(女巫回答[think部分的末尾序数:], 对女巫行为的回答)
    print(玩家角色身份列表,玩家现状态列表,'180')
    # 预言家的回合
    print('预言家回合')
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员', '女巫请闭眼(这表明女巫玩家已经完成了他的回合).预言家请睁眼,预言家请选择你要查验的玩家.\n')
    for i,玩家角色身份 in enumerate(玩家角色身份列表):
        if 玩家角色身份 == '预言家' and 玩家现状态列表[i] != '死亡':
            预言家回合结束 = False
            while not 预言家回合结束:
                Agent的历史对话[i] = Agent的历史对话[i] + [{'role': 'user','content':消息列表[i]}]
                消息列表[i] = ''
                response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[i])
                Agent的历史对话[i] = Agent的历史对话[i] + [{'role': 'assistant','content':response['message']['content']}]
                投票者回答 = response['message']['content']
                think部分的末尾序数 = 投票者回答.find('</think>') + len('</think>')
                # print(预言家回答[think部分的末尾序数:])
                预言家回合结束,对预言家行为的回答=预言家行动(玩家角色身份列表, 玩家现状态列表, 投票者回答[think部分的末尾序数:])
                消息列表[i] = 对预言家行为的回答
                print(投票者回答[think部分的末尾序数:], 对预言家行为的回答)
    # 死亡降临,猎人技能生效判定
    for i, 角色身份 in enumerate(玩家角色身份列表):
        if 角色身份 == '猎人' and 玩家现状态列表[i] == '濒死':
            猎人技能发动 += [[i,True]]
    玩家现状态列表,公示 = 代管时间变化(玩家现状态列表,公示)


    # 天亮讨论
    昼夜 = '白天'
    day += 1
    消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表, '全体成员','天亮了,现在是第{}天的白天\n'.format(str(day)))
    消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表, '全体成员', '、'.join(公示)+'.')
    print('死亡公示','、'.join(公示)+'.')
    # 玩家现状态列表 = [['狼人','村民','村民','猎人','女巫','预言家','猎人','死亡','狼人','猎人','村民','村民','猎人']]
    存活玩家列表 = []

    for 存活玩家id,玩家状态 in enumerate(玩家现状态列表):
        if 玩家状态 != '死亡':
            存活玩家列表 += [str(存活玩家id)]
    # print(存活玩家列表)
    消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表, '全体成员', '现在存活的玩家有{}.\n'.format('、'.join(存活玩家列表)))
    # 清空公示栏
    公示 = []
    # 猎人技能发动
    猎人行为 = []
    for 猎人编号,技能发动情况 in 猎人技能发动:
        if 技能发动情况:
            消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表, 猎人编号,'你被攻击了,现在处于濒死状态,这意味着你可以发动技能杀一个玩家,请使用[带走:玩家编号]选择你要杀的玩家,或者使用[弃权:-1]放弃发动技能带走玩家.\n')
            猎人回合结束 = False
            while not 猎人回合结束:
                Agent的历史对话[猎人编号] = Agent的历史对话[猎人编号] + [{'role': 'user', 'content': 消息列表[猎人编号]}]
                消息列表[猎人编号] = ''
                response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[猎人编号])
                Agent的历史对话[猎人编号] = Agent的历史对话[猎人编号] + [
                    {'role': 'assistant', 'content': response['message']['content']}]
                猎人回答 = response['message']['content']
                think部分的末尾序数 = 猎人回答.find('</think>') + len('</think>')
                # print(预言家回答[think部分的末尾序数:])
                猎人回合结束, 对猎人行为的回答 = 猎人行动(玩家角色身份列表, 玩家现状态列表, 猎人回答[think部分的末尾序数:])
                消息列表[猎人编号] = 对猎人行为的回答
                print(猎人回答, 对猎人行为的回答)
            if 对猎人行为的回答 != '你选择弃权.':
                猎人行为 = [[猎人编号,int(对猎人行为的回答[5:].replace('号玩家.', ''))]]
                print(玩家角色身份列表,玩家现状态列表,'241')
                # 猎人带来的死亡
                for 发动者编号,杀的玩家 in 猎人行为:
                    玩家现状态列表 = 根据选举结果处死玩家(玩家现状态列表,'黑夜',杀的玩家)
                    公示 = []
                    玩家现状态列表,公示 = 代管时间变化(玩家现状态列表,公示)
                    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表,消息列表,'全体成员','{}号玩家身份为猎人,{}号玩家发动技能带走玩家,{}'.format(str(发动者编号),str(发动者编号),公示[0]))
    # 根据是否有猎人发动技能选择是否再次公示
    if 公示 != []:
        存活玩家列表 = []
        for 玩家id, 玩家状态 in enumerate(玩家现状态列表):
            if 玩家状态 != '死亡':
                存活玩家列表 += [str(玩家id)]
        消息列表 = 根据玩家身份为玩家发送消息(玩家角色身份列表, 消息列表, '全体成员','现在存活的玩家有{}.\n'.format('、'.join(存活玩家列表)))
    # 判断是否结束
    end,结束原因 = 判断游戏结束(玩家现状态列表)
    print(玩家角色身份列表,玩家现状态列表,'256')
    # 发言
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','此局简易程序狼人杀,偶数日从0号玩家开始接着1,2,3...顺序发言,奇数日则倒序发言.')
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','现在是第{}天白天,下面进入发言阶段(请先不要投票)(请以玩家的身份作出回应,在发言阶段的话会展示给所有玩家.).'.format(day))
    print('现在是第{}天白天.'.format(day))
    # 发言阶段
    for 存活玩家id in 存活玩家列表:
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','请{}号玩家发言'.format(存活玩家id))
        Agent的历史对话[int(存活玩家id)] = Agent的历史对话[int(存活玩家id)] + [{'role': 'user', 'content': 消息列表[int(存活玩家id)]}]
        消息列表[int(存活玩家id)] = ''
        response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[int(存活玩家id)])
        Agent的历史对话[int(存活玩家id)] = Agent的历史对话[int(存活玩家id)] + [{'role': 'assistant', 'content': response['message']['content']}]
        think部分的末尾序数 = response['message']['content'].find('</think>') + len('</think>')
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员', '{}号玩家发言:{}'.format(存活玩家id,response['message']['content'][think部分的末尾序数:]))
        print(存活玩家id,response['message']['content'][think部分的末尾序数:])
#think部分的末尾序数 = 女巫回答.find('</think>') + len('</think>')
    # 预投票
    预投票行为统计 = []
    预投票票统计 = []
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','现在进入投票阶段,除非投票阶段结束，或者投票结果产生争议后二审，这个阶段你不能向其它玩家说话.')
    for 存活玩家id in 存活玩家列表:
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','请选择你投票的玩家.如果你需要投票,请说[投票:被投票的人的编号],或者弃权请说[投票:-1],在大家投票结束后,法官会公示大家的投票对象,让大家再考虑是否更改投票,'.format(存活玩家id))

        投票者回合结束 = False
        while not 投票者回合结束:
            # 回复部分
            Agent的历史对话[int(存活玩家id)] = Agent的历史对话[int(存活玩家id)] + [{'role': 'user', 'content': 消息列表[int(存活玩家id)]}]
            消息列表[int(存活玩家id)] = ''
            response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[int(存活玩家id)])
            Agent的历史对话[int(存活玩家id)] = Agent的历史对话[int(存活玩家id)] + [{'role': 'assistant', 'content': response['message']['content']}]
            think部分的末尾序数 = response['message']['content'].find('</think>') + len('</think>')
            print(response['message']['content'][think部分的末尾序数:])
            投票者回答 = response['message']['content']
            think部分的末尾序数 = 投票者回答.find('</think>') + len('</think>')
            投票者回合结束, 对投票行为的回答 = 投票(存活玩家列表, 玩家现状态列表,投票者回答[think部分的末尾序数:])
            消息列表[i] = 对投票行为的回答
            print(存活玩家id,投票者回答[think部分的末尾序数:], 对投票行为的回答)
        if 对投票行为的回答[:3] == '你投票':
            预投票行为统计 += ['{}号玩家选择投票{}号玩家.'.format(存活玩家id, 对投票行为的回答[3:-4])]
            预投票票统计 += [对投票行为的回答[3:-4]]
        else:
            预投票行为统计 += ['{}号玩家选择弃权.'.format(存活玩家id)]
    print(预投票行为统计)
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','(向大家展示投票结果)' + ','.join(预投票行为统计))
    消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','大家可以根据其他人的投票结果选择是否更改自己的投票,如果你需要投票,请说[投票:被投票的人的编号],或者弃权请说[投票:-1].')

    def 递归投票过程(玩家现状态列表,投票范围,消息列表,投票轮数):
        if 投票轮数 != 1:
            print('由于投票结果有平票出现,将第{}次举行投票,投票范围是{}号玩家'.format(str(投票轮数),','.join(投票范围)))
            消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','由于投票结果有平票出现,将第{}次举行投票,投票范围是{}号玩家'.format(str(投票轮数),','.join(投票范围)) )
        投票行为统计 = []
        投票票统计 = []
        for 存活玩家id in 存活玩家列表:
            Agent的历史对话[int(存活玩家id)] = Agent的历史对话[int(存活玩家id)] + [{'role': 'user', 'content': 消息列表[int(存活玩家id)]}]
            消息列表[int(存活玩家id)] = ''
            投票者回合结束 = False
            while not 投票者回合结束:
                # 回复部分
                response: ChatResponse = chat(model=model_name, messages=Agent的历史对话[int(存活玩家id)])

                think部分的末尾序数 = response['message']['content'].find('</think>') + len('</think>')
                投票者回答 = response['message']['content']
                think部分的末尾序数 = 投票者回答.find('</think>') + len('</think>')
                # print(预言家回答[think部分的末尾序数:])
                投票者回合结束, 对投票行为的回答 = 投票(投票范围, 玩家现状态列表, 投票者回答[think部分的末尾序数:])
                消息列表[int(存活玩家id)] += 对投票行为的回答
                Agent的历史对话[int(存活玩家id)] = Agent的历史对话[int(存活玩家id)] + [{'role': 'user', 'content': 消息列表[int(存活玩家id)]}]
                消息列表[int(存活玩家id)] = ''
                print('{}号玩家:'.format(存活玩家id), 投票者回答[think部分的末尾序数:], 对投票行为的回答)
            if 对投票行为的回答[:3] == '你投票':
                投票行为统计 += ['{}号玩家选择投票{}号玩家.'.format(存活玩家id, 对投票行为的回答[3:-4])]
                投票票统计 += [对投票行为的回答[3:-4]]
            else:
                投票行为统计 += ['{}号玩家选择弃权.'.format(存活玩家id)]
        # print(投票行为统计,'投票行为统计')
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','(向大家展示大家投票的对象:' + ','.join(投票行为统计) + '.')
        # print(投票票统计,'投票票统计')
        统计簿 = {}
        for 票 in 投票票统计:
            if 票 not in 统计簿:
                统计簿[票] = 1
            else:
                统计簿[票] += 1
        # print(统计簿,'统计簿')
        最多票数列表 = []
        max_vector = 0
        for id, i in 统计簿.items():
            if i == max_vector:
                最多票数列表 += [id]
            if i > max_vector:
                max_vector = i
                最多票数列表 = [id]

        if len(最多票数列表) == 0:
            return [],消息列表
        if len(最多票数列表) == 1:
            return 最多票数列表,消息列表
        else:
            投票范围 = 最多票数列表
            投票轮数 += 1
            return 递归投票过程(玩家现状态列表,投票范围,消息列表,投票轮数)

    投票结果,消息列表 = 递归投票过程(玩家现状态列表,存活玩家列表,消息列表,1)
    print('投票结果是{}号玩家淘汰.'.format(投票结果))
    if 投票结果 != []:
        print('{}号玩家被投票出局.'.format(投票结果))
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','{}号玩家被投票出局.'.format(投票结果))
    else:
        消息列表 = 根据玩家身份为玩家发送消息(玩家现状态列表, 消息列表, '全体成员','本日投票结果为:无人出局.')
        print('本日投票结果为:无人出局.')
    玩家现状态列表 = 根据选举结果处死玩家(玩家现状态列表,昼夜,投票结果[0])
